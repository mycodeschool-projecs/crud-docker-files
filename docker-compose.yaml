
networks:
  mynet:
    driver: bridge

volumes:
  db_data:
    driver: local
  kibana_data_test:
  es_data_test:
  logstash_pipeline:
  prometheus_data:
  grafana_data:
  grafana_provisioning:
    driver: local
  rabbitmq_data:
    driver: local

x-variables:
  elastic_password: &elastic_password 'passwOrd'
  kibana_password: &kibana_password 'passwOrd'


services:

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: kube_db
    networks:
      - mynet
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 1

  kube-land:
    image: mycodeschool/crud-auth-api:05.06.2025.20.30.02
    networks:
      - mynet
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8082:8082"
    depends_on:
      mysql:
        condition: service_healthy

  kube-ms1:
    image: mycodeschool/crud-command-api:05.06.2025.20.30.39
    networks:
      - mynet
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # ADDITIONAL_CORS_ORIGIN: "http://localhost:5000,http://localhost:3000,http://54.155.119.235:3000,http://54.155.119.235:5000,http://icode.mywire.org:5000,http://icode.mywire.org:3000"
    depends_on:
      mysql:
        condition: service_healthy

  edge:
    image: mycodeschool/crud-gateway:15.04.2025.08.39.25
    networks:
      - mynet
    ports:
      - "5000:5000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_ZIPKIN_BASE_URL: http://zipkin:9411
    depends_on:
      kube-land:
        condition: service_started
      zipkin:
        condition: service_started


  client:
    image: mycodeschool/crud-client-api:05.06.2025.20.15.51
    networks:
      - mynet
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_PATH_TO=development
#      - REACT_APP_API_URL=http://54.155.119.235:5000
      - REACT_APP_API_URL=http://localhost:3000
     # - REACT_APP_API_URL=http://icode.mywire.org:5000


  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    networks:
      - mynet
    ports:
      - "9411:9411"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9411/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    environment:
      ELASTIC_PASSWORD: *elastic_password
      discovery.type: 'single-node'
      cluster.name: 'elasticsearch'
      bootstrap.memory_lock: 'true'
      ES_JAVA_OPTS: '-Xms1g -Xmx1g'
      xpack.security.enabled: 'true'
      xpack.security.http.ssl.enabled: 'false'
    networks:
      - mynet
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - es_data_test:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
      ELASTICSEARCH_USERNAME: 'kibana_system'
      ELASTICSEARCH_PASSWORD: *kibana_password
      TELEMETRY_ENABLED: 'false'
      # Add encryption keys to prevent warnings
      XPACK_SECURITY_ENCRYPTIONKEY: 'fhjskloppd678ehkdfdlliverpoolfcr'
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: 'fhjskloppd678ehkdfdlliverpoolfcr'
      XPACK_REPORTING_ENCRYPTIONKEY: 'fhjskloppd678ehkdfdlliverpoolfcr'
      # Set reporting roles to false as suggested in warning
      XPACK_REPORTING_ROLES_ENABLED: 'false'
      # Enable secure cookies
      XPACK_SECURITY_SECURECOOKIES: 'true'
      # Fix for Chromium sandbox warning
      XPACK_SCREENSHOTTING_BROWSER_CHROMIUM_DISABLESANDBOX: 'true'
    networks:
      - mynet
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch
      - setup
    volumes:
      - kibana_data_test:/usr/share/kibana/data
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.1
    container_name: logstash
    environment:
      ELASTIC_PASSWORD: *elastic_password
      CONFIG_STRING: |
        input {
          tcp {
            port => 3100
            codec => json_lines
          }
        }
        output {
          elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            user => "elastic"
            password => "$${ELASTIC_PASSWORD}"
            ssl => false
            index => "kube-land"
          }
        }
    networks:
      - mynet
    ports:
      - "3100:3100"
    depends_on:
      - elasticsearch

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: setup
    environment:
      ELASTIC_PASSWORD: *elastic_password
      KIBANA_PASSWORD: *kibana_password
    command:
      - bash
      - -c
      - |
        echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do 
          echo "Elasticsearch not ready yet, waiting...";
          sleep 10; 
        done;

        echo "Elasticsearch is available, waiting additional time for full initialization...";
        sleep 30;

        echo "Setting kibana_system password";
        until curl -s -X POST -u "elastic:$${ELASTIC_PASSWORD}" -H "Content-Type: application/json" \
          http://elasticsearch:9200/_security/user/kibana_system/_password \
          -d "{\"password\":\"$${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do 
          echo "Failed to set kibana_system password, retrying...";
          sleep 10; 
        done;

        echo "Password set successfully. Verifying kibana_system user...";
        if curl -s -I -u "kibana_system:$${KIBANA_PASSWORD}" http://elasticsearch:9200/_cluster/health | grep -q "200 OK"; then
          echo "kibana_system user verified successfully!";
        else
          echo "Warning: Could not verify kibana_system user. Kibana might have connection issues.";
        fi

        echo "Setup completed!";
    networks:
      - mynet
    depends_on:
      - elasticsearch

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
    environment:
      PROMETHEUS_CONFIG: |
        global:
          scrape_interval: 15s
        scrape_configs:
          - job_name: 'spring-boot-apps'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets:
                  - 'kube-land:8082'
                  - 'kube-ms1:8081'
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo "$${PROMETHEUS_CONFIG}" > /etc/prometheus/prometheus.yml
        /bin/prometheus --config.file=/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    depends_on:
      - kube-land
    networks:
      - mynet

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
      - GF_SERVER_HTTP_PORT=4000  # Schimbă portul intern al Grafana
    ports:
        - "4000:4000"  # Mapare corectă între host și container
    depends_on:
      - prometheus
    networks:
      - mynet
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_provisioning:/etc/grafana/provisioning
    entrypoint:
      - /bin/sh
      - -c
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        mkdir -p /etc/grafana/provisioning/dashboards
        echo '
        apiVersion: 1

        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            isDefault: true
            url: http://prometheus:9090
            version: 1
            editable: false
        ' > /etc/grafana/provisioning/datasources/datasource.yml
        /run.sh

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    networks:
      - mynet
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5

  notifications-service:
    image: mycodeschool/crud-notifications-api:latest
    build:
      context: ../crud-notifications-api
      dockerfile: Dockerfile
    networks:
      - mynet
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
